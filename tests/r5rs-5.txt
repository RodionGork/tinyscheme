; remade from Chibi Scheme "r5rs-tests.scm"

(list 'a (+ 3 4) 'c)
(a 7 c)

(list)
()

(length '(a b c))
3

(length '(a (b) (c d e)))
3

(length '())
0

(append '(x) '(y))
(x y)

(append '(a) '(b c d))
(a b c d)

(append '(a (b)) '((c)))
(a (b) (c))

(append '(a b) '(c . d))
(a b c . d)

(append '() 'a)
a

(reverse '(a b c))
(c b a)

(reverse '(a (b c) d (e (f))))
((e (f)) d (b c) a)

(list-ref '(a b c d) 2)
c

(memq 'a '(a b c))
(a b c)

(memq 'b '(a b c))
(b c)

(memq 'a '(b c d))
#f

(memq (list 'a) '(b (a) c))
#f

(member (list 'a) '(b (a) c))
((a) c)

(memv 101 '(100 101 102))
(101 102)

(assq (list 'a) '(((a)) ((b)) ((c))))
#f

(assoc (list 'a) '(((a)) ((b)) ((c))))
((a))

(assv 5 '((2 3) (5 7) (11 13)))
(5 7)

(symbol? 'foo)
#t

(symbol? (car '(a b)))
#t

(symbol? "bar")
#f

(symbol? 'nil)
#t

(symbol? '())
#f

(write (symbol->string 'flying-fish))
"flying-fish"

(write (symbol->string 'Martin))
"Martin"

(write (symbol->string (string->symbol "Malvina")))
"Malvina"

(string? "a")
#t

(string? 'a)
#f

(string-length "")
0

(string-length "abc")
3

(write (string-ref "abc" 0))
#\a

(write (string-ref "abc" 2))
#\c

(string=? "a" (string #\a))
#t

(string=? "a" (string #\b))
#f

(string<? "a" "aa")
#t

(string<? "aa" "a")
#f

(string<? "a" "a")
#f

(string<=? "a" "aa")
#t

(string<=? "a" "a")
#t

(string=? "a" (make-string 1 #\a))
#t

(string=? "a" (make-string 1 #\b))
#f

(write (substring "abc" 0 0))
""

(write (substring "abc" 0 1))
"a"

(write (substring "abc" 1 3))
"bc"

(write (string-append "abc" ""))
"abc"

(write (string-append "" "abc"))
"abc"

(write (string-append "a" "bc"))
"abc"

(write (let ((vec (vector 0 '(2 2 2 2) "Anna"))) (vector-set! vec 1 '("Sue" "Sue")) vec))
#(0 ("Sue" "Sue") "Anna")
