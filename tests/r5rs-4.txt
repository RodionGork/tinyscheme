(eqv? 2 2.0)
#f

(equal? 2.0 2)
#f

(equal? (make-vector 5 'a) (make-vector 5 'a))
#t

(max 3 4)
4

(max 3.9 4)
4.0

(+ 3 4)
7

(+ 3)
3

(+)
0

(* 4)
4

(*)
1

(- 3 4)
-1

(- 3 4 5)
-6

(- 3)
-3

(- 3.0 4)
-1.0

(abs -7)
7

(modulo 13 4)
1

(remainder 13 4)
1

(modulo -13 4)
3

(remainder -13 4)
-1

(modulo 13 -4)
-3

(remainder 13 -4)
1

(modulo -13 -4)
-1

(remainder -13 -4)
-1

(gcd 32 -36)
4

(lcm 32 -36)
288

(string->number "100")
100

(string->number "100" 16)
256

(string->number "177" 8)
127

(string->number "101" 2)
5

(string->number "1e2")
100.0

(number->string 100)
100

(number->string 256 16)
100

(number->string 288 17)
GG

(number->string 127 8)
177

(number->string 5 2)
101

(not 3)
#f

(not (list 3))
#f

(not '())
#f

(not (list))
#f

(not '())
#f

(boolean? 0)
#f

(boolean? '())
#f

(pair? '(a . b))
#t

(pair? '(a b c))
#t

(cons 'a '())
(a)

(cons '(a) '(b c d))
((a) b c d)

(write (cons "a" '(b c)))
("a" b c)

(cons 'a 3)
(a . 3)

(cons '(a b) 'c)
((a b) . c)

(car '(a b c))
a

(car '((a) b c d))
(a)

(car '(1 . 2))
1

(cdr '((a) b c d))
(b c d)

(cdr '(1 . 2))
2

(list? '(a b c))
#t

(list? '())
#t

(list? '(a . b))
#f

(let ((x (list 'a))) (set-cdr! x x) (list? x))
#f

